#file_omiemi2011<-file.choose()
omiemi2011<-read.csv('omiemi2011.csv',sep=";")
#file_omiemi2012<-file.choose()
omiemi2012<-read.csv('omiemi2012.csv',sep=";")
#file_omiemi2013<-file.choose()
omiemi2013<-read.csv('omiemi2013.csv',sep=";")
#file_omiemi2014<-file.choose()
omiemi2014<-read.csv('omiemi2014.csv',sep=";")
#juntamos los 4 archivos en uno solo para falicitar su uso
omiemi<-omiemi2011
#omiemi<-merge(omiemi,omiemi2012,all=TRUE)
#omiemi<-merge(omiemi,omiemi2013,all=TRUE)
#omiemi<-merge(omiemi,omiemi2014,all=TRUE)
#Llamamos al scrip utilidades
uti<-file.choose()
source(uti)
# Separacion de variables -------------------------------------------------
#Separacion de variables fecha
#creamos 5 nuevas columnas en el fichero omiemi que son:
#day el dia de cada registro
#time la hora de cada registro
#year el anio de cada registro
#week la semana de cada registro
#date formato FECHA-HORA, sirve para usar la funcion selectbyDateTime
Hora <- paste(omiemi$time, ":00:00", sep="")
omiemi$date <- as.POSIXct(paste(omiemi$Fecha, Hora, sep=" "),"GMT")
for (i in 1:length(omiemi$Hora)){
if (omiemi$Hora[i]<=9) {
omiemi$time[i] <- paste(0, omiemi$Hora[i], sep="")
}
else{
omiemi$time[i]<-omiemi$Hora[i]
}
}
semana=1
for (i in 1:length(omiemi$Hora)){
omiemi$day[i]<-as.integer(format(omiemi$date[i],"%d"))
omiemi$month[i]<-as.integer(format(omiemi$date[i],"%m"))
omiemi$year[i]<-as.integer(format(omiemi$date[i],"%y"))
omiemi$week[i]<-semana
if (i%%168==0){
semana=semana+1}
}
#elegimos conjuntos train y test
#4 semanas en 4 semanas
cont1<-0
cont2<-0
print("please enter a value")
estaciones <-scan()
#              "01/03/2012","31/05/2012","01/06/2012","31/08/2012",
#              "01/09/2012","30/11/2012","01/12/2012","28/02/2013",
#              "01/03/2013","31/05/2013","01/06/2013","31/08/2013",
#              "01/09/2013","30/11/2013","01/12/2013","28/02/2014",
#              "01/03/2014","31/05/2014","01/06/2014","31/08/2014",
#              "01/09/2014","30/11/2014","01/12/2014")
errores<-matrix(nrow=14,ncol=6)
for (i in seq(1,28,2)){
cont1<-cont1+1
train<-selectByDateTime(omiemi,start=estaciones[i],
end=estaciones[i+1])
test<-selectByDateTime(omiemi,start=estaciones[i+2],
end=estaciones[i+3])
datos<-merge(train,test,all=TRUE)
#declaro 3 grandes matrices con todos los datos y luego selcciono en el bucle uno a uno
#datos del train, de aqui iremos anadiendo uno a uno los inputs
inputs_train<-cbind(train$Hora,
train$HIDRAULICA_CONVENCIONAL,
train$HIDRAULICA_BOMBEO_PURO,
train$NUCLEAR,
train$CARBON_NACIONAL,
train$CARBON_IMPORTACION,
train$CICLO_COMBINADO,
train$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA,
train$Precio)
#datos del test, lo mismo que con el train
inputs_test<-cbind(test$Hora,
test$HIDRAULICA_CONVENCIONAL,
test$HIDRAULICA_BOMBEO_PURO,
test$NUCLEAR,
test$CARBON_NACIONAL,
test$CARBON_IMPORTACION,
test$CICLO_COMBINADO,
test$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA)
#matriz de rangos, le sirve al algoritmo para normalizar los datos
rangos<-matrix(c(0, 24,#cotas hora
min(datos$HIDRAULICA_CONVENCIONAL), max(datos$HIDRAULICA_CONVENCIONAL),
min(datos$HIDRAULICA_BOMBEO_PURO), max(datos$HIDRAULICA_BOMBEO_PURO),
min(datos$NUCLEAR), max(datos$NUCLEAR),
min(datos$CARBON_NACIONAL), max(datos$CARBON_NACIONAL),
min(datos$CARBON_IMPORTACION),max(datos$CARBON_IMPORTACION),
min(datos$CICLO_COMBINADO),max(datos$CICLO_COMBINADO),
min(datos$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA),max(datos$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA),
min(datos$Precio), max(datos$Precio)),
nrow=2)
cont2<-0
for (k in 2:7){
cont2<-cont2+1
data.train<-cbind(inputs_train[,1:k],train$Precio)
data.tst<-cbind(inputs_test[,1:k])
data.fit <- data.train[, 1:k ]
range.data<-cbind(rangos[,1:k],rangos[,9])
real.val<-test$Precio
method.type <- "SBC"
control <- list(r.a = 0.5, eps.high = 0.5, eps.low = 0.15, name = "PRUEBA")
object <- frbs.learn(data.train, range.data, method.type, control)
#predicciones para el train y para el test hechas por el algoritmo
res.fit <- predict(object, data.fit)
res.test <- predict(object, data.tst)
y.pred <- res.test
y.real <- real.val
bench <- cbind(y.pred, y.real)
#calculo de errores
residuals <- (y.real - y.pred)
residuals_fit<-(res.fit-data.train[,k+1])
MSE <- mean(residuals^2)
RMSE <- sqrt(mean(residuals^2))
SMAPE <- mean(abs(residuals)/(abs(y.real) + abs(y.pred))/2)*100
err <- c(MSE, RMSE, SMAPE)
MSE_fit <- mean(residuals_fit^2)
RMSE_fit <- sqrt(mean(residuals_fit^2))
SMAPE_fit <- mean(abs(residuals_fit)/(abs(data.train[,k+1]) + abs(res.fit))/2)*100
errores[cont1,cont2]<-RMSE
}
}
#elegimos conjuntos train y test
#4 semanas en 4 semanas
cont1<-0
cont2<-0
print("please enter a value")
estaciones <-scan()
#              "01/03/2012","31/05/2012","01/06/2012","31/08/2012",
#              "01/09/2012","30/11/2012","01/12/2012","28/02/2013",
#              "01/03/2013","31/05/2013","01/06/2013","31/08/2013",
#              "01/09/2013","30/11/2013","01/12/2013","28/02/2014",
#              "01/03/2014","31/05/2014","01/06/2014","31/08/2014",
#              "01/09/2014","30/11/2014","01/12/2014")
errores<-matrix(nrow=14,ncol=6)
for (i in seq(1,28,2)){
cont1<-cont1+1
train<-selectByDateTime(omiemi,start=estaciones[i],
end=estaciones[i+1])
test<-selectByDateTime(omiemi,start=estaciones[i+2],
end=estaciones[i+3])
datos<-merge(train,test,all=TRUE)
#declaro 3 grandes matrices con todos los datos y luego selcciono en el bucle uno a uno
#datos del train, de aqui iremos anadiendo uno a uno los inputs
inputs_train<-cbind(train$Hora,
train$HIDRAULICA_CONVENCIONAL,
train$HIDRAULICA_BOMBEO_PURO,
train$NUCLEAR,
train$CARBON_NACIONAL,
train$CARBON_IMPORTACION,
train$CICLO_COMBINADO,
train$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA,
train$Precio)
#datos del test, lo mismo que con el train
inputs_test<-cbind(test$Hora,
test$HIDRAULICA_CONVENCIONAL,
test$HIDRAULICA_BOMBEO_PURO,
test$NUCLEAR,
test$CARBON_NACIONAL,
test$CARBON_IMPORTACION,
test$CICLO_COMBINADO,
test$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA)
#matriz de rangos, le sirve al algoritmo para normalizar los datos
rangos<-matrix(c(0, 24,#cotas hora
min(datos$HIDRAULICA_CONVENCIONAL), max(datos$HIDRAULICA_CONVENCIONAL),
min(datos$HIDRAULICA_BOMBEO_PURO), max(datos$HIDRAULICA_BOMBEO_PURO),
min(datos$NUCLEAR), max(datos$NUCLEAR),
min(datos$CARBON_NACIONAL), max(datos$CARBON_NACIONAL),
min(datos$CARBON_IMPORTACION),max(datos$CARBON_IMPORTACION),
min(datos$CICLO_COMBINADO),max(datos$CICLO_COMBINADO),
min(datos$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA),max(datos$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA),
min(datos$Precio), max(datos$Precio)),
nrow=2)
cont2<-0
for (k in 2:7){
cont2<-cont2+1
data.train<-cbind(inputs_train[,1:k],train$Precio)
data.tst<-cbind(inputs_test[,1:k])
data.fit <- data.train[, 1:k ]
range.data<-cbind(rangos[,1:k],rangos[,9])
real.val<-test$Precio
method.type <- "SBC"
control <- list(r.a = 0.5, eps.high = 0.5, eps.low = 0.15, name = "PRUEBA")
object <- frbs.learn(data.train, range.data, method.type, control)
#predicciones para el train y para el test hechas por el algoritmo
res.fit <- predict(object, data.fit)
res.test <- predict(object, data.tst)
y.pred <- res.test
y.real <- real.val
bench <- cbind(y.pred, y.real)
#calculo de errores
residuals <- (y.real - y.pred)
residuals_fit<-(res.fit-data.train[,k+1])
MSE <- mean(residuals^2)
RMSE <- sqrt(mean(residuals^2))
SMAPE <- mean(abs(residuals)/(abs(y.real) + abs(y.pred))/2)*100
err <- c(MSE, RMSE, SMAPE)
MSE_fit <- mean(residuals_fit^2)
RMSE_fit <- sqrt(mean(residuals_fit^2))
SMAPE_fit <- mean(abs(residuals_fit)/(abs(data.train[,k+1]) + abs(res.fit))/2)*100
errores[cont1,cont2]<-RMSE
}
}
#elegimos conjuntos train y test
#4 semanas en 4 semanas
cont1<-0
cont2<-0
print("please enter a value")
estaciones <-scan()
#estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
#              "01/09/2011","30/11/2011","01/12/2011","28/02/2012",
#              "01/03/2012","31/05/2012","01/06/2012","31/08/2012",
#              "01/09/2012","30/11/2012","01/12/2012","28/02/2013",
#              "01/03/2013","31/05/2013","01/06/2013","31/08/2013",
#              "01/09/2013","30/11/2013","01/12/2013","28/02/2014",
#              "01/03/2014","31/05/2014","01/06/2014","31/08/2014",
#              "01/09/2014","30/11/2014","01/12/2014")
errores<-matrix(nrow=14,ncol=6)
for (i in seq(1,28,2)){
cont1<-cont1+1
train<-selectByDateTime(omiemi,start=estaciones[i],
end=estaciones[i+1])
test<-selectByDateTime(omiemi,start=estaciones[i+2],
end=estaciones[i+3])
datos<-merge(train,test,all=TRUE)
#declaro 3 grandes matrices con todos los datos y luego selcciono en el bucle uno a uno
#datos del train, de aqui iremos anadiendo uno a uno los inputs
inputs_train<-cbind(train$Hora,
train$HIDRAULICA_CONVENCIONAL,
train$HIDRAULICA_BOMBEO_PURO,
train$NUCLEAR,
train$CARBON_NACIONAL,
train$CARBON_IMPORTACION,
train$CICLO_COMBINADO,
train$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA,
train$Precio)
#datos del test, lo mismo que con el train
inputs_test<-cbind(test$Hora,
test$HIDRAULICA_CONVENCIONAL,
test$HIDRAULICA_BOMBEO_PURO,
test$NUCLEAR,
test$CARBON_NACIONAL,
test$CARBON_IMPORTACION,
test$CICLO_COMBINADO,
test$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA)
#matriz de rangos, le sirve al algoritmo para normalizar los datos
rangos<-matrix(c(0, 24,#cotas hora
min(datos$HIDRAULICA_CONVENCIONAL), max(datos$HIDRAULICA_CONVENCIONAL),
min(datos$HIDRAULICA_BOMBEO_PURO), max(datos$HIDRAULICA_BOMBEO_PURO),
min(datos$NUCLEAR), max(datos$NUCLEAR),
min(datos$CARBON_NACIONAL), max(datos$CARBON_NACIONAL),
min(datos$CARBON_IMPORTACION),max(datos$CARBON_IMPORTACION),
min(datos$CICLO_COMBINADO),max(datos$CICLO_COMBINADO),
min(datos$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA),max(datos$FUEL_._GAS_REGIMEN_ORDINARIO_.SIN_PRIMA),
min(datos$Precio), max(datos$Precio)),
nrow=2)
cont2<-0
for (k in 2:7){
cont2<-cont2+1
data.train<-cbind(inputs_train[,1:k],train$Precio)
data.tst<-cbind(inputs_test[,1:k])
data.fit <- data.train[, 1:k ]
range.data<-cbind(rangos[,1:k],rangos[,9])
real.val<-test$Precio
method.type <- "SBC"
control <- list(r.a = 0.5, eps.high = 0.5, eps.low = 0.15, name = "PRUEBA")
object <- frbs.learn(data.train, range.data, method.type, control)
#predicciones para el train y para el test hechas por el algoritmo
res.fit <- predict(object, data.fit)
res.test <- predict(object, data.tst)
y.pred <- res.test
y.real <- real.val
bench <- cbind(y.pred, y.real)
#calculo de errores
residuals <- (y.real - y.pred)
residuals_fit<-(res.fit-data.train[,k+1])
MSE <- mean(residuals^2)
RMSE <- sqrt(mean(residuals^2))
SMAPE <- mean(abs(residuals)/(abs(y.real) + abs(y.pred))/2)*100
err <- c(MSE, RMSE, SMAPE)
MSE_fit <- mean(residuals_fit^2)
RMSE_fit <- sqrt(mean(residuals_fit^2))
SMAPE_fit <- mean(abs(residuals_fit)/(abs(data.train[,k+1]) + abs(res.fit))/2)*100
errores[cont1,cont2]<-RMSE
}
}
print("please enter a value")
estaciones <-scan()
print("please enter a value")
estaciones <-scan()
print("please enter a value")
estaciones <-scan()
#estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
cont1<-0
cont2<-0
print("please enter a value")
estaciones <-scan(quiet=TRUE)
estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
print("please enter a value")
estaciones <-scan(quiet=FALSE)
estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
"01/09/2011","3
print("please enter a value")
estaciones <-scan(quiet=TRUE)
estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
"01/09/2011","
print("please enter a value")
estaciones <-scan(skip=1)
estaciones<-c("01/03/201
print("please enter a value")
estaciones <-scan(skip=0)
estaciones<-c("01/03/201
print("please enter a value")
estaciones <-scan("")
estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
print("please enter a value")
estaciones <-scan()
estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
print("please enter a value")
#estaciones <-scan()
x <- scan("",what="int")
estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
print("please enter a value")
#estaciones <-scan()
x <- scan("",what="int")
estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
"01/09/2011","30/11/2011","01/12/2011","28/02/2012",
"01/03/2012","31/05/2012","01/06/2012","31/08/2012",
"01/09/2012","30/11/2012","01/12/2012","28/02/2013",
"01/03/2013","31/05/2013","01/06/2013","31/08/2013",
"01/09/2013","30/11/2013","01/12/2013","28/02/2014",
"01/03/2014","31/05/2014","01/06/2014","31/08/2014",
"01/09/2014","30/11/2014","01/12/2014")
print("please enter a value")
#estaciones <-scan()
x <- scan("",what="int")
var <- 0
estaciones <-scan()
print("please enter a value")
estaciones <-scan()
x <- scan("",what="int")
var <- 0
line <- readLines()
cont2<-0
mydata <- data.frame(age=numeric(0), gender=character(0), weight=numeric(0))
mydata <- edit(mydata)
#estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
View(mydata)
View(mydata)
cont1<-0
cont2<-0
mydata <- data.frame(fecha=character(0))
mydata <- edit(mydata)
#estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
cont2<-0
mydata <- data.frame(fecha=character(0))
mydata <- edit(mydata)
#estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
View(mydata)
View(mydata)
cont2<-0
mydata <- data.frame(fecha=character(0))
mydata <- edit(mydata)
#estaciones<-c("01/03/2011","31/05/2011","01/06/2011","31/08/2011",
f()
#hola
f <- function() {
cat("\n", "Enter a string:", "\n")
s <- scan(n=1)
cat("\n", "You entered", s, "\n")
}
f()
hola
f()
readinteger <- function()
{
n <- readline(prompt="Enter an integer: ")
return(as.integer(n))
}
print(readinteger())
print(readinteger())
print(readinteger())
hola
library(shiny)
library(rCharts)
library(RCurl)
library(RJSONIO)
urlStatus <- "http://priceprofor.ekergy.es/omieinfosys/status"
x <- getURLContent(urlStatus)
y <- fromJSON(x)
z <- y$StudyDataMIBEL$endrecdate
lastDate <- as.character(as.Date(z))
urlData <- "http://priceprofor.ekergy.es/omieinfosys/DataFileGenerator"
x <- postForm(urlData,
# .opts = list(postfields = toJSON(list(fechaini = "2011-1-1", fechafin = "2015-1-1", market = "ES")),
# .opts = list(postfields = toJSON(list(fechaini = "2011-1-1", fechafin = as.character(Sys.Date()), market = "ES")),
.opts = list(postfields = toJSON(list(fechaini = "2011-1-1", fechafin = lastDate, market = "ES")),
httpheader = c('Content-Type' = 'application/json', Accept = 'application/json')
))
omiemi <- read.csv(text=x, sep = ";",  header=TRUE)
runApp("R/Interactive_highcharts_Shiny_postform")
runApp("R/Interactive_highcharts_Shiny_postform")
url <- "http://priceprofor.ekergy.es/omieinfosys/ReportDay"
curl = getCurlHandle('{"day":"2014-1-1","market":"ES"}')
# x <- getURLContent(url, curl = curl)
x <- getURLContent(url)
y <- fromJSON(x)
y$Fecha
x
y
y$Fecha
y$PrecioMedio
url <- "http://priceprofor.ekergy.es/omieinfosys/ReportDay"
curl = getCurlHandle('{"day":"2014-1-1","market":"ES"}')
x <- getURLContent(url)
y <- fromJSON(x)
y$Fecha
y$PrecioMedio
x <- getURLContent(url, curl = curl)
y <- fromJSON(x)
y$Fecha
y$PrecioMedio
myURL <- "http://priceprofor.ekergy.es/omieinfosys/ReportDay"
curl = getCurlHandle()
curlSetOpt(cookiejar="cookies.txt",  followlocation = TRUE, curl=curl)
myPage <- getURL(myURL, curl = curl)
names(fromJSON(myPage))
url <- "http://priceprofor.ekergy.es/omieinfosys/ReportDay"
x <- postForm(url,
.opts = list(postfields = toJSON(list(day = "2014-2-16", market = "ES")),
httpheader = c('Content-Type' = 'application/json', Accept = 'application/json')
))
y <- fromJSON(x)
y$Precios
library(shiny)
library(rCharts)
library(RCurl)
library(RJSONIO)
urlStatus <- "http://priceprofor.ekergy.es/omieinfosys/status"
x <- getURLContent(urlStatus)
y <- fromJSON(x)
z <- y$StudyDataMIBEL$endrecdate
lastDate <- as.character(as.Date(z))
urlData <- "http://priceprofor.ekergy.es/omieinfosys/DataFileGenerator"
w <- postForm(urlData,
# .opts = list(postfields = toJSON(list(fechaini = "2011-1-1", fechafin = "2015-1-1", market = "ES")),
# .opts = list(postfields = toJSON(list(fechaini = "2011-1-1", fechafin = as.character(Sys.Date()), market = "ES")),
.opts = list(postfields = toJSON(list(fechaini = "2011-1-1", fechafin = lastDate, market = "ES")),
httpheader = c('Content-Type' = 'application/json', Accept = 'application/json')
))
omiemi <- read.csv(text=w, sep = ";",  header=TRUE)
runApp("R/Interactive_highcharts_Shiny_postform")
install.packages("fortunes")
install.packages("RCurl")
contrib.url(repos, type)
contrib.url()
contrib.url(repos)
contrib.url(http://cran.r-project.org/)
contrib.url(http://cran.r-project.org)
contrib.url("http://cran.r-project.org")
print("verver")
print("verver");print("verver")
runApp("/home/david/workspace/shinyrcharts/samples/02_text",port=12345,launch.browser=TRUE)
library("shiny")
runApp("/home/david/workspace/shinyrcharts/samples/02_text",port=12345,launch.browser=TRUE)
http://127.0.0.1:12345
runApp("/home/david/workspace/shinyrcharts/samples/02_text",port=12345,launch.browser=TRUE)
runApp("/home/david/workspace/shinyrcharts/samples/02_text",port=12345,launch.browser=TRUE)
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/",port=12345,launch.browser=TRUE)
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/",port=12345,launch.browser=TRUE)
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/",port=12345,launch.browser=TRUE)
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/",port=12345,launch.browser=TRUE)
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
runApp("/home/david/workspace/shinyrcharts/samples/Interactive_highcharts_Shiny_postform/")
